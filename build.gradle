plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

archivesBaseName = project.archives_base_name
version = project.mod_version + '+mc' + minecraft_version
group = project.maven_group

repositories {
	maven {
		name "AppleSkin Maven"
		url "https://maven.ryanliptak.com/"
	}
	maven {
		// Required for some transitive dependencies
		url "https://maven.shedaniel.me/"
	}
	maven {
		// Required for some transitive dependencies
		url "https://maven.terraformersmc.com/releases"
	}
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

loom {
	runs {
		testmodClient {
			client()
			name "Testmod Client"
			source sourceSets.testmod
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// AppleSkin
	modCompileOnly "squeek.appleskin:appleskin-fabric:mc1.18.2-2.4.0:api"
	modLocalRuntime(modCompileOnly("squeek.appleskin:appleskin-fabric:mc1.18.2-2.4.0"))

	// Testmod stuff
	testmodImplementation sourceSets.main.output
}

processResources {
	inputs.property "version", project.version
	filteringCharset "UTF-8"

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
	if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	def javaVersion = JavaVersion.toVersion(targetJavaVersion)
	if (JavaVersion.current() < javaVersion) {
		toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
	}
	archivesBaseName = project.archives_base_name
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "$archivesBaseName-$minecraft_major_version"
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

static def getProjectChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

if (project.hasProperty("githubToken")) {
	githubRelease {
		token project.githubToken
		targetCommitish = project.minecraft_major_version
		releaseName = "Version $project.mod_version for $project.mod_mc_version_spec"
		body = getProjectChangelog()
		releaseAssets remapJar.getArchiveFile()
		prerelease = project.release_type != "release"
		overwrite = true
	}
}
